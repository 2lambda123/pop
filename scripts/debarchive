#!/usr/bin/env python3

import argparse
import os
import os.path
from subprocess import check_call, check_output
import sys

def force_remove(path):
    if os.path.exists(path):
        os.remove(path)

parser = argparse.ArgumentParser(description="Build package archive")
args = parser.parse_args(sys.argv[1:])

email = os.environ.get("DEBEMAIL")
if email is None:
    raise Exception("DEBEMAIL is not set")

if not os.path.exists("dpkg"):
    os.mkdir("dpkg")

force_remove("dpkg/Sources")
force_remove("dpkg/Sources.gz")
force_remove("dpkg/Packages")
force_remove("dpkg/Packages.gz")
force_remove("dpkg/Release")
force_remove("dpkg/Release.gpg")
force_remove("dpkg/InRelease")

source = check_output(["apt-ftparchive", "-qq", "sources", "."], cwd="dpkg").decode("utf-8")

with open("dpkg/Sources", "w") as f:
    f.write(source)

check_call(["gzip", "--keep", "dpkg/Sources"])

packages = check_output(["apt-ftparchive", "packages", "."], cwd="dpkg").decode("utf-8")

with open("dpkg/Packages", "w") as f:
    f.write(packages)

check_call(["gzip", "--keep", "dpkg/Packages"])

release = check_output(["apt-ftparchive", "release", "."], cwd="dpkg").decode("utf-8")

with open("dpkg/Release", "w") as f:
    f.write(release)

check_call([
    "gpg", "--clearsign",
    "--local-user", email,
    "--batch", "--yes",
    "--digest-algo", "sha512",
    "-o", "dpkg/InRelease", "dpkg/Release"
])

check_call([
    "gpg", "-abs",
    "--local-user", email,
    "--batch", "--yes",
    "--digest-algo", "sha512",
    "-o", "dpkg/Release.gpg", "dpkg/Release"
])

check_call([
    "gpg", "--export", "--armor",
    "--local-user", email,
    "--batch", "--yes",
    "--digest-algo", "sha512",
    "-o", "dpkg/Release.asc"
])
