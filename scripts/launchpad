#!/usr/bin/env python3

import argparse
from debian.changelog import Version
from debian.deb822 import Deb822, Dsc, Sources
from os import path
import sys

from lib import foreach_repo, github, launchpad_anon

parser = argparse.ArgumentParser(description="Upload packages to proposed")
parser.add_argument("repos", nargs="*", default=[])
args = parser.parse_args(sys.argv[1:])

codenames = ["artful", "bionic"]

local = {}
for codename in codenames:
    sources_path = path.join("_build", "repos", "master", "dists", codename, "main", "source", "Sources")
    local[codename] = []
    for pkg in Sources.iter_paragraphs(open(sources_path)):
        local[codename].append(pkg)

lp = launchpad_anon()
owner = lp.people["system76"]
archive = owner.getPPAByName(name="pop")

remote = {}
for codename in codenames:
    series = "https://api.launchpad.net/devel/ubuntu/" + codename
    remote[codename] = archive.getPublishedSources(distro_series=series, status="Published")

def find_local(source_name, codename):
    for pkg in local[codename]:
        if pkg['package'] == source_name:
            return pkg['version']
    return None

def find_remote(source_name, codename):
    for pkg in remote[codename]:
        if pkg.source_package_name == source_name:
            return pkg.source_package_version
    return None

def callback(repo):
    print("\x1B[1m" + repo["name"] + "\x1B[0m")

    control_path = path.join(repo["name"], "debian", "control")
    if path.isfile(control_path):
        with open(control_path, "r") as fp:
            control = Deb822(fp)

        source_name = control.get("Source")

        for codename in codenames:
            print("  " + codename)

            local_version = find_local(source_name, codename)
            remote_version = find_remote(source_name, codename)

            print("    local:", local_version)
            print("    remote:", remote_version)

            # if local_version:
            #     changes_path = path.join("_build", "source", source_name + "_" + local_version + "_source.changes")

            if local_version and remote_version:
                lv = Version(local_version)
                rv = Version(remote_version)
                if lv == rv:
                    print("    versions are equal")
                elif lv > rv:
                    print("    local version is newer")
                elif rv > lv:
                    print("    remote version is newer")
                else:
                    print("    failed to compare versions")


foreach_repo(callback, args.repos)
