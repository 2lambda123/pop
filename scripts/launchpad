#!/usr/bin/env python3

import argparse
from debian.changelog import Version
from debian.deb822 import Deb822, Sources
from os import path
from subprocess import check_call
import sys

from lib import foreach_repo, launchpad, launchpad_anon

# Packages to release either in system76-dev or system76
any_packages = ("hidpi-daemon")

# Packages to release only in system76-dev
dev_packages = ("system76-dkms", "system76-driver", "system76-firmware-daemon", "system76-wallpapers")

parser = argparse.ArgumentParser(description="Upload packages to proposed")
parser.add_argument("repos", nargs="*", default=[])
parser.add_argument("--check", action="store_true")
parser.add_argument("--dev", action="store_true")
parser.add_argument("--release", action="store_true")
parser.add_argument("--yes", action="store_true")
args = parser.parse_args(sys.argv[1:])

codenames = ("xenial", "artful", "bionic")

staging = {}
for codename in codenames:
    sources_path = path.join("_build", "repos", "master", "dists", codename, "main", "source", "Sources")
    staging[codename] = []
    if path.exists(sources_path):
        for pkg in Sources.iter_paragraphs(open(sources_path)):
            staging[codename].append(pkg)

if args.release:
    lp = launchpad()
else:
    lp = launchpad_anon()

if args.dev:
    owner = lp.people["system76-dev"]
    release_archive = owner.getPPAByName(name="stable")
    proposed_archive = owner.getPPAByName(name="pre-stable")
else:
    owner = lp.people["system76"]
    release_archive = owner.getPPAByName(name="pop")
    proposed_archive = owner.getPPAByName(name="proposed")

proposed_pending = {}
proposed_published = {}
release_pending = {}
release_published = {}
for codename in codenames:
    series = "https://api.launchpad.net/devel/ubuntu/" + codename
    proposed_pending[codename] = proposed_archive.getPublishedSources(distro_series=series, status="Pending")
    proposed_published[codename] = proposed_archive.getPublishedSources(distro_series=series, status="Published")
    release_pending[codename] = release_archive.getPublishedSources(distro_series=series, status="Pending")
    release_published[codename] = release_archive.getPublishedSources(distro_series=series, status="Published")

def find_staging(source_name, codename):
    for pkg in staging[codename]:
        if pkg['package'] == source_name:
            return pkg['version']
    return None

def find_proposed_published(source_name, codename):
    for pkg in proposed_published[codename]:
        if pkg.source_package_name == source_name:
            return pkg
    return None

def find_proposed(source_name, codename):
    for pkg in proposed_pending[codename]:
        if pkg.source_package_name == source_name:
            return pkg.source_package_version
    for pkg in proposed_published[codename]:
        if pkg.source_package_name == source_name:
            return pkg.source_package_version
    return None

def find_release(source_name, codename):
    for pkg in release_pending[codename]:
        if pkg.source_package_name == source_name:
            return pkg.source_package_version
    for pkg in release_published[codename]:
        if pkg.source_package_name == source_name:
            return pkg.source_package_version
    return None

def callback(repo):
    print("\x1B[1m" + repo["name"] + "\x1B[0m", flush=True)

    in_any = repo["name"] in any_packages
    in_dev = repo["name"] in dev_packages
    if args.dev:
        if not in_any and not in_dev:
            print("  skipping, only released to system76", flush=True)
            return
    else:
        if in_dev:
            print("  skipping, only released to system76-dev", flush=True)
            return

    control_path = path.join(repo["name"], "debian", "control")
    if path.isfile(control_path):
        with open(control_path, "r") as fp:
            control = Deb822(fp)

        source_name = control.get("Source")

        for codename in codenames:
            print("  " + codename, flush=True)

            staging_version = find_staging(source_name, codename)
            proposed_version = find_proposed(source_name, codename)
            release_version = find_release(source_name, codename)

            print("    staging:", staging_version, flush=True)
            print("    proposed:", proposed_version, flush=True)
            print("    release:", release_version, flush=True)

            proposed_upload = False
            release_upload = False

            if staging_version:
                sv = Version(staging_version)
            else:
                print("    staging version not found", flush=True)
                sv = Version("0")

            if proposed_version:
                pv = Version(proposed_version)
            else:
                print("    proposed version not found", flush=True)
                pv = Version("0")

            if release_version:
                rv = Version(release_version)
            else:
                print("    release version not found", flush=True)
                rv = Version("0")

            if sv == pv:
                print("    staging and proposed versions are equal", flush=True)
            elif sv > pv:
                print("    staging version is newer than proposed", flush=True)
                proposed_upload = True
            elif sv < pv:
                print("    proposed version is newer than staging", flush=True)

            if pv == rv:
                print("    proposed and release versions are equal", flush=True)
            elif pv > rv:
                print("    proposed version is newer than release", flush=True)
                release_upload = True
            elif pv < rv:
                print("    release version is newer than proposed", flush=True)

            if proposed_upload and not args.check and not args.release:
                changes_path = path.join("_build", "source", source_name + "_" + staging_version + "_source.changes")
                ppa_upload_path = path.join("_build", "source", source_name + "_" + staging_version + "_source.ppa.upload")

                if args.dev:
                    changes_path_dev = path.join("_build", "source", source_name + "_" + staging_version + "_dev_source.changes")
                    ppa_upload_path_dev = path.join("_build", "source", source_name + "_" + staging_version + "_dev_source.ppa.upload")
                    shutil.copyfile(changes_path, changes_path_dev)
                    shutil.copyfile(ppa_upload_path, ppa_upload_path_dev)
                    changes_path = changes_path_dev
                    ppa_upload_path = ppa_upload_path_dev

                if not path.exists(changes_path):
                    print("      Changes file not found {!r}!!!".format(changes_path), flush=True)
                elif path.exists(ppa_upload_path):
                    print("      Already uploaded changes to proposed", flush=True)
                elif args.yes or input("      Upload proposed version (y/N)? ") == "y":
                    print("      Uploading to proposed", flush=True)
                    if args.dev:
                        check_call(["dput", "ppa:system76-dev/pre-stable", changes_path])
                    else:
                        check_call(["dput", "ppa:system76/proposed", changes_path])
                else:
                    print("      Did not upload to proposed", flush=True)

            if release_upload and not args.check and args.release:
                proposed_package = find_proposed_published(source_name, codename)
                if not proposed_package:
                    print("      Package not published in proposed!!!", flush=True)
                elif args.yes or input("      Upload release version (y/N)? ") == "y":
                    print("      Uploading to release", flush=True)
                    release_archive.copyPackage(
                        from_archive = proposed_archive,
                        include_binaries = True,
                        source_name = proposed_package.source_package_name,
                        to_pocket = proposed_package.pocket,
                        version = proposed_package.source_package_version
                    )
                else:
                    print("      Did not upload to release", flush=True)

        return source_name

results = foreach_repo(callback, args.repos)

if args.check:
    print("\x1B[1mChecking published packages\x1B[0m")
    for codename in codenames:
        print("  " + codename, flush=True)

        if args.release:
            published = release_published[codename]
        else:
            published = proposed_published[codename]

        for pkg in published:
            repo_name = None
            for result in results:
                if pkg.source_package_name == results[result]:
                    repo_name = result
                    break

            if repo_name:
                print("    " + pkg.source_package_name + ": " + repo_name)
            else:
                print("    \x1B[1m" + pkg.source_package_name + "\x1B[0m")
