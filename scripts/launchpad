#!/usr/bin/env python3

import argparse
from debian.changelog import Version
from debian.deb822 import Deb822, Sources
from os import path
from subprocess import check_call
import sys

from lib import foreach_repo, launchpad_anon

parser = argparse.ArgumentParser(description="Upload packages to proposed")
parser.add_argument("repos", nargs="*", default=[])
parser.add_argument("--yes", action="store_true")
args = parser.parse_args(sys.argv[1:])

codenames = ["artful", "bionic"]

staging = {}
for codename in codenames:
    sources_path = path.join("_build", "repos", "master", "dists", codename, "main", "source", "Sources")
    staging[codename] = []
    for pkg in Sources.iter_paragraphs(open(sources_path)):
        staging[codename].append(pkg)

lp = launchpad_anon()
owner = lp.people["system76"]
release_archive = owner.getPPAByName(name="pop")
proposed_archive = owner.getPPAByName(name="proposed")

proposed_pending = {}
proposed_published = {}
release_pending = {}
release_published = {}
for codename in codenames:
    series = "https://api.launchpad.net/devel/ubuntu/" + codename
    proposed_pending[codename] = proposed_archive.getPublishedSources(distro_series=series, status="Pending")
    proposed_published[codename] = proposed_archive.getPublishedSources(distro_series=series, status="Published")
    release_pending[codename] = release_archive.getPublishedSources(distro_series=series, status="Pending")
    release_published[codename] = release_archive.getPublishedSources(distro_series=series, status="Published")

def find_staging(source_name, codename):
    for pkg in staging[codename]:
        if pkg['package'] == source_name:
            return pkg['version']
    return None

def find_proposed(source_name, codename):
    for pkg in proposed_pending[codename]:
        if pkg.source_package_name == source_name:
            return pkg.source_package_version
    for pkg in proposed_published[codename]:
        if pkg.source_package_name == source_name:
            return pkg.source_package_version
    return None

def find_release(source_name, codename):
    for pkg in release_pending[codename]:
        if pkg.source_package_name == source_name:
            return pkg.source_package_version
    for pkg in release_published[codename]:
        if pkg.source_package_name == source_name:
            return pkg.source_package_version
    return None

def callback(repo):
    print("\x1B[1m" + repo["name"] + "\x1B[0m")

    control_path = path.join(repo["name"], "debian", "control")
    if path.isfile(control_path):
        with open(control_path, "r") as fp:
            control = Deb822(fp)

        source_name = control.get("Source")

        for codename in codenames:
            print("  " + codename)

            staging_version = find_staging(source_name, codename)
            proposed_version = find_proposed(source_name, codename)
            release_version = find_release(source_name, codename)

            print("    staging:", staging_version)
            print("    proposed:", proposed_version)
            print("    release:", release_version)

            proposed_upload = False
            release_upload = False

            if staging_version:
                sv = Version(staging_version)
                if proposed_version:
                    pv = Version(proposed_version)
                    if sv == pv:
                        print("    staging and proposed versions are equal")
                    elif sv > pv:
                        print("    staging version is newer")
                        proposed_upload = True
                    elif sv < pv:
                        print("    proposed version is newer")
                    if release_version:
                        rv = Version(release_version)
                        if pv == rv:
                            print("    proposed and release versions are equal")
                        elif pv > rv:
                            print("    proposed version is newer")
                            release_upload = True
                        elif pv < rv:
                            print("    release version is newer")
                    else:
                        print("    release version not found")
                        release_upload = True
                else:
                    print("    proposed version not found")
                    proposed_upload = True
            else:
                print("    staging version not found")

            if proposed_upload:
                changes_path = path.join("_build", "source", source_name + "_" + staging_version + "_source.changes")
                ppa_upload_path = path.join("_build", "source", source_name + "_" + staging_version + "_source.ppa.upload")
                if not path.exists(changes_path):
                    print("      Changes file not found {!r}!!!".format(changes_path))
                elif path.exists(ppa_upload_path):
                    print("      Already uploaded changes to proposed")
                elif args.yes or input("      Upload proposed version (y/N)? ") == "y":
                    print("      Uploading to proposed")
                    check_call(["dput", "ppa:system76/proposed", changes_path])
                else:
                    print("      Did not upload to proposed")

            if release_upload:
                pass

foreach_repo(callback, args.repos)
