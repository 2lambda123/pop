#!/usr/bin/env python3

import argparse
import os.path
import sys

from lib import foreach_repo, github, github_no_pages

EVERY_SERIES = ["bionic", "focal", "impish", "jammy"]

parser = argparse.ArgumentParser(description="Check protection of all Pop!_OS repositories")
parser.add_argument("repos", nargs="*", default=[])
args = parser.parse_args(sys.argv[1:])

def set_protection():
    # accept: application/vnd.github.v3+json header
    # PUT /repos/{owner}/{repo}/branches/{branch}/protection
    {
        required_status_checks: 
        enforce_admins:
        required_pull_request_reviews:
        restrictions:
        required_linear_history:
        allow_force_pushes:
        allow_deletions:
        required_conversation_resolution:
    }

def get_series_name(branch_name):
    try:
        return branch_name.rsplit("_", 1)[1]
    except IndexError:
        return None

# i686 where appropriate? and arm64?
# ubuntu where appropriate

# do not use os.path
# need to test if `master_*` exists in `else`
def get_branch_serieses(repo, branch, branches):
    #if os.path.exists(os.path.join(repo["name"], "debian")):
    if True:
        series_name = get_series_name(branch["name"])
        if series_name is not None:
            return [series_name]
        else:
            other_series = [get_series_name(i["name"]) for i in branches]
            return [i for i in EVERY_SERIES if i not in other_series]
    else:
        return []

def get_context_series(context):
    if context.startswith("pop-os/staging/"):
        parts = context.split("/")
        if len(parts) > 2:
            series = parts[2]
        else:
            series = None
    else:
        series = None

    return series

bold = "\x1B[1m"
reset = "\x1B[0m"

def callback(repo):
    print(bold + repo["name"] + reset)

    branches = github(repo["branches_url"].replace("{/branch}", ""));
    import pprint
    pprint.pprint(branches)
    for branch in branches:
        if branch["name"].startswith("master"):
            print(branch["name"] + ":", "https://github.com/pop-os/" + repo["name"] + "/settings/branches/"),

            info = github_no_pages(repo["branches_url"].replace("{/branch}", "/" + branch["name"]))
            pprint.pprint(info)
            protection = info["protection"]

            enabled = protection["enabled"]
            print("    Enabled: " + str(enabled))
            if not enabled:
                print(bold + "    Missing Enabled: True" + reset)

            checks = protection["required_status_checks"]

            enforcement_level = checks["enforcement_level"]
            print("    Enforcement: " + enforcement_level)
            if enforcement_level != "everyone":
                print(bold + "    Missing Enforcement: everyone" + reset) # non_admins

            branch_serieses = get_branch_serieses(repo, branch, branches)

            contexts = checks["contexts"]

            for branch_series in branch_serieses:
                print("    Series: " + branch_series)

                source_context = "pop-os/staging/" + branch_series + "/source"
                if not source_context in contexts:
                    print(bold + "    Missing Context: " + source_context + reset)

                binary_context = "pop-os/staging/" + branch_series + "/binary-amd64"
                if not binary_context in contexts:
                    print(bold + "    Missing Context: " + binary_context + reset)

            for context in contexts:
                context_series = get_context_series(context)
                print("    Context: " + context)
                if not context_series in branch_serieses:
                    print(bold + "    Invalid Context: " + context + reset)



foreach_repo(callback, args.repos)
